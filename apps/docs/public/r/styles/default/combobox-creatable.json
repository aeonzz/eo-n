{
  "name": "combobox-creatable",
  "type": "registry:example",
  "files": [
    {
      "path": "examples/combobox-creatable.tsx",
      "content": "import * as React from \"react\";\r\nimport { Plus } from \"lucide-react\";\r\n\r\nimport {\r\n  Combobox,\r\n  ComboboxChip,\r\n  ComboboxChips,\r\n  ComboboxContent,\r\n  ComboboxEmpty,\r\n  ComboboxInput,\r\n  ComboboxItem,\r\n  ComboboxList,\r\n  ComboboxValue,\r\n} from \"@/registry/default/ui/combobox\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\n\r\ninterface LabelItem {\r\n  creatable?: string;\r\n  id: string;\r\n  value: string;\r\n}\r\n\r\nconst initialLabels: LabelItem[] = [\r\n  { id: \"bug\", value: \"bug\" },\r\n  { id: \"docs\", value: \"documentation\" },\r\n  { id: \"enhancement\", value: \"enhancement\" },\r\n  { id: \"help-wanted\", value: \"help wanted\" },\r\n  { id: \"good-first-issue\", value: \"good first issue\" },\r\n];\r\n\r\nexport default function ComboboxMultiSelect() {\r\n  const id = React.useId();\r\n\r\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\r\n  const createInputRef = React.useRef<HTMLInputElement | null>(null);\r\n  const comboboxInputRef = React.useRef<HTMLInputElement | null>(null);\r\n  const pendingQueryRef = React.useRef(\"\");\r\n\r\n  const [labels, setLabels] = React.useState<LabelItem[]>(initialLabels);\r\n  const [selected, setSelected] = React.useState<LabelItem[]>([]);\r\n  const [query, setQuery] = React.useState(\"\");\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  function handleCreate() {\r\n    const input = createInputRef.current || comboboxInputRef.current;\r\n    const value = input ? input.value.trim() : \"\";\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    const normalized = value.toLocaleLowerCase();\r\n    const baseId = normalized.replace(/\\s+/g, \"-\");\r\n    const existing = labels.find(\r\n      (l) => l.value.trim().toLocaleLowerCase() === normalized\r\n    );\r\n\r\n    if (existing) {\r\n      setSelected((prev) =>\r\n        prev.some((i) => i.id === existing.id) ? prev : [...prev, existing]\r\n      );\r\n      setOpenDialog(false);\r\n      setQuery(\"\");\r\n      return;\r\n    }\r\n\r\n    // Ensure we don't collide with an existing id (e.g., value \"docs\" vs. existing id \"docs\")\r\n    const existingIds = new Set(labels.map((l) => l.id));\r\n    let uniqueId = baseId;\r\n    if (existingIds.has(uniqueId)) {\r\n      let i = 2;\r\n      while (existingIds.has(`${baseId}-${i}`)) {\r\n        i += 1;\r\n      }\r\n      uniqueId = `${baseId}-${i}`;\r\n    }\r\n\r\n    const newItem: LabelItem = { id: uniqueId, value };\r\n\r\n    if (!selected.find((item) => item.id === newItem.id)) {\r\n      setLabels((prev) => [...prev, newItem]);\r\n      setSelected((prev) => [...prev, newItem]);\r\n    }\r\n\r\n    setOpenDialog(false);\r\n    setQuery(\"\");\r\n  }\r\n\r\n  function handleCreateSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    handleCreate();\r\n  }\r\n\r\n  const trimmed = query.trim();\r\n  const lowered = trimmed.toLocaleLowerCase();\r\n  const exactExists = labels.some(\r\n    (l) => l.value.trim().toLocaleLowerCase() === lowered\r\n  );\r\n  // Show the creatable item alongside matches if there's no exact match\r\n  const itemsForView: Array<LabelItem> =\r\n    trimmed !== \"\" && !exactExists\r\n      ? [\r\n          ...labels,\r\n          {\r\n            creatable: trimmed,\r\n            id: `create:${lowered}`,\r\n            value: `Create \"${trimmed}\"`,\r\n          },\r\n        ]\r\n      : labels;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Combobox\r\n        items={itemsForView}\r\n        multiple\r\n        onValueChange={(next) => {\r\n          const last = next[next.length - 1];\r\n          if (last && last.creatable) {\r\n            pendingQueryRef.current = last.creatable;\r\n            setOpenDialog(true);\r\n            return;\r\n          }\r\n          const clean = next.filter((i) => !i.creatable);\r\n          setSelected(clean);\r\n          setQuery(\"\");\r\n        }}\r\n        value={selected}\r\n        inputValue={query}\r\n        onInputValueChange={setQuery}\r\n        onOpenChange={(open, details) => {\r\n          if (\"key\" in details.event && details.event.key === \"Enter\") {\r\n            // When pressing Enter:\r\n            // - If the typed value exactly matches an existing item, add that item to the selected chips\r\n            // - Otherwise, create a new item\r\n            if (trimmed === \"\") {\r\n              return;\r\n            }\r\n\r\n            const existing = labels.find(\r\n              (l) => l.value.trim().toLocaleLowerCase() === lowered\r\n            );\r\n\r\n            if (existing) {\r\n              setSelected((prev) =>\r\n                prev.some((i) => i.id === existing.id)\r\n                  ? prev\r\n                  : [...prev, existing]\r\n              );\r\n              setQuery(\"\");\r\n              return;\r\n            }\r\n\r\n            pendingQueryRef.current = trimmed;\r\n            setOpenDialog(true);\r\n          }\r\n        }}\r\n      >\r\n        <div className=\"flex w-full max-w-sm flex-col gap-2\">\r\n          <Label htmlFor=\"label\">Programming languages</Label>\r\n          <ComboboxChips ref={containerRef}>\r\n            <ComboboxValue>\r\n              {(value: LabelItem[]) => (\r\n                <React.Fragment>\r\n                  {value.map((language) => (\r\n                    <ComboboxChip key={language.id} aria-label={language.value}>\r\n                      {language.value}\r\n                    </ComboboxChip>\r\n                  ))}\r\n                  <ComboboxInput\r\n                    ref={comboboxInputRef}\r\n                    id=\"label\"\r\n                    placeholder={value.length > 0 ? \"\" : \"e.g. TypeScript\"}\r\n                  />\r\n                </React.Fragment>\r\n              )}\r\n            </ComboboxValue>\r\n          </ComboboxChips>\r\n        </div>\r\n        <ComboboxContent anchor={containerRef} sideOffset={6}>\r\n          <ComboboxEmpty>No language found.</ComboboxEmpty>\r\n          <ComboboxList>\r\n            {(item: LabelItem) =>\r\n              item.creatable ? (\r\n                <ComboboxItem key={item.id} value={item}>\r\n                  {item.value}\r\n                  <Plus className=\"absolute right-2\" />\r\n                </ComboboxItem>\r\n              ) : (\r\n                <ComboboxItem key={item.id} value={item}>\r\n                  {item.value}\r\n                </ComboboxItem>\r\n              )\r\n            }\r\n          </ComboboxList>\r\n        </ComboboxContent>\r\n      </Combobox>\r\n    </React.Fragment>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}