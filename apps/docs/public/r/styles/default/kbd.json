{
  "name": "kbd",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/kbd.tsx",
      "content": "import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport const kbdVariants = cva(\r\n  \"inline-flex items-center justify-center text-center text-xs font-medium tracking-tight shadow-sm gap-1.5 text-muted-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-accent\",\r\n        outline: \"bg-background outline outline-border\",\r\n        ghost: \"bg-transparent shadow-none\",\r\n      },\r\n      size: {\r\n        default: \"h-6 rounded px-1.5\",\r\n        sm: \"h-5 rounded-sm px-1\",\r\n        lg: \"h-7 rounded-md px-2\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nconst KEY_DESCRIPTIONS: Record<string, string> = {\r\n  \"⌘\": \"Command\",\r\n  \"⇧\": \"Shift\",\r\n  \"⌥\": \"Option\",\r\n  \"⌃\": \"Control\",\r\n  Ctrl: \"Control\",\r\n  \"⌫\": \"Backspace\",\r\n  \"⎋\": \"Escape\",\r\n  \"↩\": \"Return\",\r\n  \"⇥\": \"Tab\",\r\n  \"⌤\": \"Enter\",\r\n  \"↑\": \"Arrow Up\",\r\n  \"↓\": \"Arrow Down\",\r\n  \"←\": \"Arrow Left\",\r\n  \"→\": \"Arrow Right\",\r\n  \"⇪\": \"Caps Lock\",\r\n  fn: \"Function\",\r\n  \"⌦\": \"Delete\",\r\n  \"⇞\": \"Page Up\",\r\n  \"⇟\": \"Page Down\",\r\n  \"↖\": \"Home\",\r\n  \"↘\": \"End\",\r\n  \"↕\": \"Page Up/Down\",\r\n  \"↔\": \"Left/Right\",\r\n} as const;\r\n\r\nexport type KbdVariants = VariantProps<typeof kbdVariants>;\r\n\r\ninterface KbdProps extends React.ComponentProps<\"div\">, KbdVariants {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Kbd({ className, variant, size, asChild, ...props }: KbdProps) {\r\n  const Comp = asChild ? Slot : \"div\";\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"kbd\"\r\n      className={cn(kbdVariants({ className, size, variant }))}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\ninterface KbdKeyProps extends React.ComponentProps<\"span\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction KbdKey({\r\n  className,\r\n  asChild,\r\n  title: titleProp,\r\n  children,\r\n  ...props\r\n}: KbdKeyProps) {\r\n  const Comp = asChild ? Slot : \"span\";\r\n  const keyText = children?.toString() ?? \"\";\r\n  const title = titleProp ?? KEY_DESCRIPTIONS[keyText] ?? keyText;\r\n  return (\r\n    <abbr title={title} className=\"no-underline\">\r\n      <Comp data-slot=\"kbd-key\" className={cn(className)} {...props}>\r\n        {children}\r\n      </Comp>\r\n    </abbr>\r\n  );\r\n}\r\n\r\ninterface KbdSeparatorProps extends React.ComponentProps<\"span\"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction KbdSeparator({\r\n  className,\r\n  children = \"+\",\r\n  asChild,\r\n  ...props\r\n}: KbdSeparatorProps) {\r\n  const Comp = asChild ? Slot : \"span\";\r\n  return (\r\n    <Comp\r\n      data-slot=\"kbd-separtor\"\r\n      className={cn(\"text-muted-foreground\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Comp>\r\n  );\r\n}\r\n\r\nexport { Kbd, KbdKey, KbdSeparator };\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}