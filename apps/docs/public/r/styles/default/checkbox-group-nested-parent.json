{
  "name": "checkbox-group-nested-parent",
  "type": "registry:example",
  "files": [
    {
      "path": "examples/checkbox-group-nested-parent.tsx",
      "content": "import * as React from \"react\";\r\n\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport { CheckboxGroup } from \"@/registry/default/ui/checkbox-group\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\n\r\nconst mainPermissions = [\r\n  {\r\n    label: \"View Dashboard\",\r\n    value: \"view-dashboard\",\r\n  },\r\n  {\r\n    label: \"Access Reports\",\r\n    value: \"access-reports\",\r\n  },\r\n  {\r\n    label: \"Manage Users\",\r\n    value: \"manage-users\",\r\n  },\r\n] as const;\r\n\r\nconst userManagementPermissions = [\r\n  {\r\n    label: \"Create User\",\r\n    value: \"create-user\",\r\n  },\r\n  {\r\n    label: \"Edit User\",\r\n    value: \"edit-user\",\r\n  },\r\n  {\r\n    label: \"Delete User\",\r\n    value: \"delete-user\",\r\n  },\r\n  {\r\n    label: \"assign Roles\",\r\n    value: \"assign-roles\",\r\n  },\r\n];\r\n\r\nexport default function CheckboxGroupNestedParent() {\r\n  const [mainValue, setMainValue] = React.useState<string[]>([\r\n    \"view-dashboard\",\r\n  ]);\r\n  const [managementValue, setManagementValue] = React.useState<string[]>([\r\n    \"create-user\",\r\n  ]);\r\n\r\n  return (\r\n    <CheckboxGroup\r\n      aria-labelledby=\"permissions\"\r\n      value={mainValue}\r\n      onValueChange={(value) => {\r\n        if (value.includes(\"manage-users\")) {\r\n          setManagementValue(userManagementPermissions.map((p) => p.value));\r\n        } else if (\r\n          managementValue.length === userManagementPermissions.length\r\n        ) {\r\n          setManagementValue([]);\r\n        }\r\n        setMainValue(value);\r\n      }}\r\n      allValues={mainPermissions.map((p) => p.value)}\r\n    >\r\n      <Label id=\"permissions\" className=\"flex items-center space-x-2\">\r\n        <Checkbox name=\"permissions\" parent />\r\n        User Permissions\r\n      </Label>\r\n      {mainPermissions\r\n        .filter((permission) => permission.value !== \"manage-users\")\r\n        .map((permission, i) => (\r\n          <Label\r\n            key={i}\r\n            id={permission.value}\r\n            className=\"flex items-center space-x-2\"\r\n          >\r\n            <Checkbox name={permission.value} />\r\n            {permission.label}\r\n          </Label>\r\n        ))}\r\n      <CheckboxGroup\r\n        aria-labelledby=\"manage-users\"\r\n        value={managementValue}\r\n        onValueChange={(value) => {\r\n          if (value.length === userManagementPermissions.length) {\r\n            setMainValue((prev) =>\r\n              Array.from(new Set([...prev, \"manage-users\"]))\r\n            );\r\n          } else {\r\n            setMainValue((prev) => prev.filter((v) => v !== \"manage-users\"));\r\n          }\r\n          setManagementValue(value);\r\n        }}\r\n        allValues={userManagementPermissions.map((p) => p.value)}\r\n      >\r\n        <Label id=\"mangage-users\" className=\"flex items-center space-x-2\">\r\n          <Checkbox name=\"mangage-users\" parent />\r\n          Manage Users\r\n        </Label>\r\n        {userManagementPermissions.map((permission, i) => (\r\n          <Label\r\n            key={i}\r\n            id={permission.value}\r\n            className=\"flex items-center space-x-2 capitalize\"\r\n          >\r\n            <Checkbox name={permission.value} />\r\n            {permission.label}\r\n          </Label>\r\n        ))}\r\n      </CheckboxGroup>\r\n    </CheckboxGroup>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}