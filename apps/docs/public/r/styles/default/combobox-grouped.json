{
  "name": "combobox-grouped",
  "type": "registry:example",
  "files": [
    {
      "path": "examples/combobox-grouped.tsx",
      "content": "import * as React from \"react\";\r\nimport { ChevronsUpDown } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Combobox,\r\n  ComboboxCollection,\r\n  ComboboxContent,\r\n  ComboboxEmpty,\r\n  ComboboxGroup,\r\n  ComboboxGroupLabel,\r\n  ComboboxIcon,\r\n  ComboboxInput,\r\n  ComboboxItem,\r\n  ComboboxList,\r\n  ComboboxTrigger,\r\n  ComboboxValue,\r\n} from \"@/registry/default/ui/combobox\";\r\n\r\ninterface Label {\r\n  value: string;\r\n  label: string;\r\n  group: \"Type\" | \"Priority\" | \"Status\" | \"Area\";\r\n}\r\n\r\ninterface LabelGroup {\r\n  value: string;\r\n  items: Label[];\r\n}\r\n\r\nconst labelGroups: Label[] = [\r\n  { value: \"t-feature\", label: \"feature\", group: \"Type\" },\r\n  { value: \"t-bug\", label: \"bug\", group: \"Type\" },\r\n  { value: \"t-docs\", label: \"documentation\", group: \"Type\" },\r\n  { value: \"t-refactor\", label: \"refactor\", group: \"Type\" },\r\n  { value: \"t-test\", label: \"test\", group: \"Type\" },\r\n  { value: \"t-chore\", label: \"chore\", group: \"Type\" },\r\n  { value: \"p-low\", label: \"low\", group: \"Priority\" },\r\n  { value: \"p-medium\", label: \"medium\", group: \"Priority\" },\r\n  { value: \"p-high\", label: \"high\", group: \"Priority\" },\r\n  { value: \"p-critical\", label: \"critical\", group: \"Priority\" },\r\n  { value: \"s-open\", label: \"open\", group: \"Status\" },\r\n  { value: \"s-in-progress\", label: \"in progress\", group: \"Status\" },\r\n  { value: \"s-review\", label: \"in review\", group: \"Status\" },\r\n  { value: \"s-closed\", label: \"closed\", group: \"Status\" },\r\n  { value: \"a-frontend\", label: \"frontend\", group: \"Area\" },\r\n  { value: \"a-backend\", label: \"backend\", group: \"Area\" },\r\n  { value: \"a-api\", label: \"api\", group: \"Area\" },\r\n  { value: \"a-infra\", label: \"infrastructure\", group: \"Area\" },\r\n  { value: \"a-mobile\", label: \"mobile\", group: \"Area\" },\r\n];\r\n\r\nfunction groupLabels(labels: Label[]): LabelGroup[] {\r\n  const groups: { [key: string]: Label[] } = {};\r\n  labels.forEach((t) => {\r\n    (groups[t.group] ??= []).push(t);\r\n  });\r\n  const order = [\"Type\", \"Priority\", \"Status\", \"Area\"];\r\n  return order.map((value) => ({ value, items: groups[value] ?? [] }));\r\n}\r\n\r\nconst groupedLabels: LabelGroup[] = groupLabels(labelGroups);\r\n\r\nexport default function ComboboxGrouped() {\r\n  return (\r\n    <Combobox items={groupedLabels} defaultValue={labelGroups[0]}>\r\n      <ComboboxTrigger\r\n        render={(props) => (\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"w-[200px] justify-between\"\r\n            {...props}\r\n          >\r\n            <ComboboxValue />\r\n            <ComboboxIcon render={<ChevronsUpDown />} />\r\n          </Button>\r\n        )}\r\n      />\r\n      <ComboboxContent>\r\n        <ComboboxInput placeholder=\"Change label...\" />\r\n        <ComboboxEmpty>No label found.</ComboboxEmpty>\r\n        <ComboboxList className=\"max-h-[min(calc(23rem-var(--input-container-height)),calc(var(--available-height)-var(--input-container-height)))]\">\r\n          {(group: LabelGroup) => (\r\n            <ComboboxGroup key={group.value} items={group.items}>\r\n              <ComboboxGroupLabel>{group.value}</ComboboxGroupLabel>\r\n              <ComboboxCollection>\r\n                {(label: Label) => (\r\n                  <ComboboxItem key={label.value} value={label}>\r\n                    {label.label}\r\n                  </ComboboxItem>\r\n                )}\r\n              </ComboboxCollection>\r\n            </ComboboxGroup>\r\n          )}\r\n        </ComboboxList>\r\n      </ComboboxContent>\r\n    </Combobox>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}