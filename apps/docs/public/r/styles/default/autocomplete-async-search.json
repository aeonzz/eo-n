{
  "name": "autocomplete-async-search",
  "type": "registry:example",
  "files": [
    {
      "path": "examples/autocomplete-async-search.tsx",
      "content": "import * as React from \"react\";\r\nimport { Loader, XIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Autocomplete,\r\n  AutocompleteClear,\r\n  AutocompleteContent,\r\n  AutocompleteInput,\r\n  AutocompleteItem,\r\n  AutocompleteList,\r\n  AutocompleteStatus,\r\n  useFilter,\r\n} from \"@/registry/default/ui/autocomplete\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\n\r\ninterface Country {\r\n  id: string;\r\n  name: string;\r\n  region: string;\r\n}\r\n\r\nconst countries: Country[] = [\r\n  { id: \"1\", name: \"Philippines\", region: \"Asia\" },\r\n  { id: \"2\", name: \"United States\", region: \"North America\" },\r\n  { id: \"3\", name: \"Canada\", region: \"North America\" },\r\n  { id: \"4\", name: \"Japan\", region: \"Asia\" },\r\n  { id: \"5\", name: \"Germany\", region: \"Europe\" },\r\n  { id: \"6\", name: \"France\", region: \"Europe\" },\r\n  { id: \"7\", name: \"Brazil\", region: \"South America\" },\r\n  { id: \"8\", name: \"Australia\", region: \"Oceania\" },\r\n  { id: \"9\", name: \"Egypt\", region: \"Africa\" },\r\n  { id: \"10\", name: \"South Africa\", region: \"Africa\" },\r\n  { id: \"11\", name: \"India\", region: \"Asia\" },\r\n  { id: \"12\", name: \"China\", region: \"Asia\" },\r\n  { id: \"13\", name: \"South Korea\", region: \"Asia\" },\r\n  { id: \"14\", name: \"Italy\", region: \"Europe\" },\r\n  { id: \"15\", name: \"Spain\", region: \"Europe\" },\r\n  { id: \"16\", name: \"United Kingdom\", region: \"Europe\" },\r\n  { id: \"17\", name: \"Mexico\", region: \"North America\" },\r\n  { id: \"18\", name: \"Argentina\", region: \"South America\" },\r\n  { id: \"19\", name: \"Chile\", region: \"South America\" },\r\n  { id: \"20\", name: \"Nigeria\", region: \"Africa\" },\r\n  { id: \"21\", name: \"Kenya\", region: \"Africa\" },\r\n  { id: \"22\", name: \"Saudi Arabia\", region: \"Asia\" },\r\n  { id: \"23\", name: \"United Arab Emirates\", region: \"Asia\" },\r\n  { id: \"24\", name: \"Turkey\", region: \"Europe/Asia\" },\r\n  { id: \"25\", name: \"Russia\", region: \"Europe/Asia\" },\r\n  { id: \"26\", name: \"Sweden\", region: \"Europe\" },\r\n  { id: \"27\", name: \"Norway\", region: \"Europe\" },\r\n  { id: \"28\", name: \"New Zealand\", region: \"Oceania\" },\r\n  { id: \"29\", name: \"Thailand\", region: \"Asia\" },\r\n  { id: \"30\", name: \"Vietnam\", region: \"Asia\" },\r\n];\r\n\r\nexport default function AutocompleteAsyncSearch() {\r\n  const [searchValue, setSearchValue] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [searchResults, setSearchResults] = React.useState<Country[]>([]);\r\n  const [error, setError] = React.useState<string | null>(null);\r\n\r\n  const { contains } = useFilter({ sensitivity: \"base\" });\r\n\r\n  React.useEffect(() => {\r\n    if (!searchValue) {\r\n      setSearchResults([]);\r\n      setIsLoading(false);\r\n      return undefined;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    let ignore = false;\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const results = await searchCountries(searchValue, contains);\r\n        if (!ignore) {\r\n          setSearchResults(results);\r\n        }\r\n      } catch (err) {\r\n        if (!ignore) {\r\n          setError(\"Failed to fetch countries. Please try again.\");\r\n          setSearchResults([]);\r\n        }\r\n      } finally {\r\n        if (!ignore) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    const timeoutId = setTimeout(fetchCountries, 300);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n      ignore = true;\r\n    };\r\n  }, [searchValue, contains]);\r\n\r\n  let status: React.ReactNode = `${searchResults.length} result${searchResults.length === 1 ? \"\" : \"s\"} found`;\r\n  if (isLoading) {\r\n    status = (\r\n      <React.Fragment>\r\n        <Loader className=\"animate-spin\" />\r\n        Searching...\r\n      </React.Fragment>\r\n    );\r\n  } else if (error) {\r\n    status = error;\r\n  } else if (searchResults.length === 0 && searchValue) {\r\n    status = `Country or region \"${searchValue}\" does not exist in the list of countries`;\r\n  }\r\n\r\n  const shouldRenderPopup = searchValue !== \"\";\r\n\r\n  return (\r\n    <Autocomplete\r\n      items={searchResults}\r\n      value={searchValue}\r\n      onValueChange={setSearchValue}\r\n      itemToStringValue={(item) => item.name}\r\n      filter={null}\r\n    >\r\n      <AutocompleteInput\r\n        render={(props) => (\r\n          <Label className=\"flex w-full max-w-2xs flex-col gap-2\">\r\n            Search country or region\r\n            <div className=\"relative\">\r\n              <Input placeholder=\"e.g. Japan or Europe\" {...props} />\r\n              <AutocompleteClear\r\n                render={\r\n                  <Button\r\n                    size=\"icon\"\r\n                    variant=\"outline\"\r\n                    className=\"absolute top-[50%] left-[94%] translate-x-[-50%] translate-y-[-50%] [&]:size-5\"\r\n                  >\r\n                    <XIcon className=\"size-3\" />\r\n                  </Button>\r\n                }\r\n              />\r\n            </div>\r\n          </Label>\r\n        )}\r\n      />\r\n      {shouldRenderPopup && (\r\n        <AutocompleteContent>\r\n          <AutocompleteStatus>{status}</AutocompleteStatus>\r\n          <AutocompleteList>\r\n            {(country: Country) => (\r\n              <AutocompleteItem key={country.id} value={country}>\r\n                <div className=\"leading-5 font-medium\">\r\n                  {country.name}\r\n                  <span className=\"text-primary-foreground bg-primary ml-2 inline-block rounded-full px-1.5 py-[1px] text-xs leading-4 font-normal\">\r\n                    {country.region}\r\n                  </span>\r\n                </div>\r\n              </AutocompleteItem>\r\n            )}\r\n          </AutocompleteList>\r\n        </AutocompleteContent>\r\n      )}\r\n    </Autocomplete>\r\n  );\r\n}\r\n\r\n// Simulates an async API call to search countries by name or region\r\nasync function searchCountries(\r\n  query: string,\r\n  filter: (item: string, query: string) => boolean\r\n): Promise<Country[]> {\r\n  // Simulate network delay (random between 100â€“600ms)\r\n  await new Promise((resolve) =>\r\n    setTimeout(resolve, Math.random() * 500 + 100)\r\n  );\r\n\r\n  // Simulate occasional network errors (1% chance or if query === \"will_error\")\r\n  if (Math.random() < 0.01 || query === \"will_error\") {\r\n    throw new Error(\"Network error\");\r\n  }\r\n\r\n  // Return filtered results:\r\n  // match either by country name or region against the query\r\n  return countries.filter(\r\n    (country) => filter(country.name, query) || filter(country.region, query)\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}